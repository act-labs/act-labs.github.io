{"version":3,"sources":["webpack:///./src/content/posts/airflow-gke-getting-started.md","webpack:///./src/generated/posts/airflow-gke-getting-started.js","webpack:///./src/actb/seo.js","webpack:///./src/actb/logo.js","webpack:///./src/actb/footer.js","webpack:///./src/actb/navigation-bar.js","webpack:///./src/actb/layout/index.js","webpack:///./src/actb/code.js","webpack:///./src/actb/mdx.js","webpack:///./src/components/page-layout.js"],"names":["MDXContent","props","_this","_React$Component","call","this","layout","render","_this$props","components","objectWithoutPropertiesLoose_default","react_default","a","createElement","dist","name","parentName","href","title","className","React","Component","SnippetsLayout","page_layout","airflow_gke_getting_started_MDXContent","__webpack_require__","d","__webpack_exports__","SEO","_ref","description","lang","meta","keywords","react__WEBPACK_IMPORTED_MODULE_2___default","gatsby__WEBPACK_IMPORTED_MODULE_5__","query","detailsQuery","data","split","map","v","trim","site","siteMetadata","react_helmet__WEBPACK_IMPORTED_MODULE_4___default","htmlAttributes","titleTemplate","project","content","property","author","concat","join","_public_static_d_304502870_json__WEBPACK_IMPORTED_MODULE_1__","defaultProps","propTypes","PropTypes","string","array","oneOfType","arrayOf","isRequired","Logo","gatsby__WEBPACK_IMPORTED_MODULE_3__","gatsby_image__WEBPACK_IMPORTED_MODULE_4___default","fixed","logo","childImageSharp","style","float","_public_static_d_2369744027_json__WEBPACK_IMPORTED_MODULE_1__","Footer","ActFooter","social","copyright","icons","_ref2","link","icon","actb_link","key","to","icon_default","type","fontSize","marginLeft","color","textAlign","SiteFooter","gatsby_browser_entry","_ref3","_ref3$config","config","Object","assign","_2743462859","Header","NavigationBar","nav","menu_default","theme","mode","defaultSelectedKeys","filter","selected","text","lineHeight","i","slug","Item","SiteNavigationBar","_1250442554","Content","Sider","Panel","children","other","padding","PageLayout","_Object$assign","defaultLayoutOptions","footer","fullHeight","layoutStyle","height","pageClassName","layout_default","seo","SideMenuPanel","menu","background","minHeight","width","SyntaxHighlighter","registerLanguage","js","bash","markdown","yaml","dockerfile","defaults","code","length","light","language","MDX","actb_src_actb_layout__WEBPACK_IMPORTED_MODULE_2__","DefaultSiteLayout","pageContext","context","frontmatter","react__WEBPACK_IMPORTED_MODULE_3___default","paddingTop","actb_src_actb_mdx__WEBPACK_IMPORTED_MODULE_0__"],"mappings":"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","file":"component---src-generated-posts-airflow-gke-getting-started-js-92267964cf4efba79d06.js","sourcesContent":["import React from 'react'\nimport { MDXTag } from '@mdx-js/tag'\n\n\nconst layoutProps = {};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.layout = null;\n  }\n\n  render() {\n    const {\n      components,\n      ...props\n    } = this.props;\n    return <MDXTag name=\"wrapper\" components={components}><MDXTag name=\"p\" components={components}>{`If you `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\n          \"href\": \"/posts/airflow-gke/\",\n          \"title\": \"Installing Airflow on GKE\"\n        }}>{`just installed`}</MDXTag>{` Airflow on GKE, it is time to check it is working and we are able to communicate with different Google Cloud Components, including Google Cloud Storage and Google Pub/Sub.`}</MDXTag>\n      <MDXTag name=\"h1\" components={components}>{`An Airflow REST API`}</MDXTag>\n      <MDXTag name=\"p\" components={components}>{`After installation, one may wish to visit an Airflow web UI and check that application is working. So far, we have not configured networking/load balancing (which is really a subject in its own), so the easiest way to access web UI is to use port forwarding:`}</MDXTag>\n      <MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\n          \"className\": \"language-sh\"\n        }}>{`kubectl port-forward pod/web-0 8080:8080\n`}</MDXTag></MDXTag>\n      <MDXTag name=\"p\" components={components}>{`Now we may check Airflow state and run our DAGs manually or using Airflow API endpoints:`}</MDXTag>\n      <MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\n          \"className\": \"language-sh\"\n        }}>{`# test Airflow webserver is running\ncurl localhost:8080/api/experimental/test\n{\"status\":\"OK\"}\n# Start DAG with <DAG_ID>\ncurl -X POST http://localhost:8080/api/experimental/dags/<DAG_ID>/dag_runs \\\n    -H 'Cache-Control: no-cache' \\\n    -H 'Content-Type: application/json' \\\n    -d '{\"conf\":\"{\\\"key\\\":\\\"value\\\"}\"}'\n`}</MDXTag></MDXTag>\n      <MDXTag name=\"p\" components={components}>{`By default, upon creation, DAGs are paused, so you may need to enable DAGs manually or set configuration parameter `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`dags_are_paused_at_creation`}</MDXTag>{` to False.`}</MDXTag>\n      <MDXTag name=\"h1\" components={components}>{`Google Cloud Storage: simple storage using GoogleCloudStorageHook`}</MDXTag>\n      <MDXTag name=\"p\" components={components}>{`We have already configured access to Cloud SQL, so we may query data from SQL databases. Another useful possibility is the ability to save data in Google cloud storage. Airflow comes with many helpers, simplifying access to different services, including GCS. To test cloud storage, lets create GCS buckets using command line `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`gsutil`}</MDXTag>{` utility (as bucket names must be globally unique you may need to change bucket names):`}</MDXTag>\n      <MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\n          \"className\": \"language-sh\"\n        }}>{`gsutil mb gs://airflow-test-source\ngsutil mb gs://airflow-test-dest\n`}</MDXTag></MDXTag>\n      <MDXTag name=\"p\" components={components}>{`Now, using `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`GoogleCloudStorageHook`}</MDXTag>{` we may test simple storage operations. During our test drive, we save file to bucket, copy it to another\nbucket, and finally download it on a local disk:`}</MDXTag>\n      <MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\n          \"className\": \"language-python\"\n        }}>{`from airflow import DAG\nfrom airflow.operators.python_operator import PythonOperator\nfrom airflow.contrib.hooks.gcs_hook import GoogleCloudStorageHook\nimport json\nfrom datetime import datetime\n\nFILE_NAME = f'./test.json'\nDOWNLOAD_NAME = f'./downloaded.json'\n\ndef save_data():\n    with open(FILE_NAME, 'w') as f:\n        json.dump({\"name\":\"name\", \"age\":10}, f)\n\ndef upload_file_func():\n    save_data()\n    hook = GoogleCloudStorageHook()\n    source_bucket = 'airflow-test-source'\n    source_object = '/data/test.json'\n    hook.upload(source_bucket, source_object, FILE_NAME)\n\ndef copy_file_func():\n    hook = GoogleCloudStorageHook()\n    source_bucket = 'airflow-test-source'\n    source_object = '/data/test.json'\n\n    dest_bucket = 'airflow-test-dest'\n    dest_object = 'test.json'\n    hook.copy(source_bucket, source_object, dest_bucket, dest_object)\n\ndef download_file_func():\n    hook = GoogleCloudStorageHook()\n    dest_bucket = 'airflow-test-dest'\n    dest_object = 'test.json'\n    hook.download(dest_bucket, dest_object, DOWNLOAD_NAME)\n    with open(DOWNLOAD_NAME) as json_file:\n        data = json.load(json_file)\n    print(data)\n\nwith DAG('gcs_examples', description='DAG', schedule_interval=None, start_date=datetime(2018, 11, 1)) as dag:\n    upload_file = PythonOperator(task_id='upload_file', python_callable=upload_file_func)\n    copy_file   = PythonOperator(task_id='copy_file', python_callable=copy_file_func)\n    download_file = PythonOperator(task_id='download_file', python_callable=download_file_func)\n    upload_file >> copy_file >> download_file\n`}</MDXTag></MDXTag>\n      <MDXTag name=\"p\" components={components}>{`Up to this point we have learned how to schedule our Airflow tasks, invoke them on demand, query data and save results after some data processing. The only missing piece is the ability to send notifications. We could do it using conventional HTTP requests, but on GCP we have an additional option: Cloud Pub/Sub. To test it, we may first create topic and publish/subscribe manually:`}</MDXTag>\n      <MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\n          \"className\": \"language-sh\"\n        }}>{`# create topic and subscription\ngcloud pubsub topics create my-topic\ngcloud pubsub subscriptions create my-sub --topic=my-topic\n# publish receive\ngcloud pubsub topics publish my-topic --message=\"hello\"\ngcloud pubsub subscriptions pull my-sub --auto-ack\n`}</MDXTag></MDXTag>\n      <MDXTag name=\"p\" components={components}>{`After which we may publish notification in our DAGs using `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`PubSubHook`}</MDXTag>{`:`}</MDXTag>\n      <MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\n          \"className\": \"language-python\"\n        }}>{`from airflow.contrib.hooks.gcp_pubsub_hook import PubSubHook\nfrom base64 import b64encode as b64e\n\nhook = PubSubHook()\n\nhook.publish(\"google_project_id\", \"my-topic\", [{\"data\": b64e(\"hello\".encode()).decode(), 'attributes': {'type': 'greeting'}  }])\n`}</MDXTag></MDXTag>\n      <MDXTag name=\"h1\" components={components}>{`Summary`}</MDXTag>\n      <MDXTag name=\"p\" components={components}>{`After installation to Google Kubernetes Engine, we checked our installation is working and tested two Google services: Google Cloud Storage and Google Cloud Pub/Sub. Now we are able to schedule our workflows, invoke them on demand, query and save processed data and notify other systems upon completion. With such a tooling under our belt we may start working on some serious ETL problems! The source code and installation scripts used in this project could be found on `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\n          \"href\": \"https://github.com/act-labs/airflow-gke\",\n          \"title\": \"Apache Airflow setup on GKE\"\n        }}>{`GitHub`}</MDXTag>{`.\n`}</MDXTag>\n           </MDXTag>;\n  }\n\n}\nexport const _frontmatter = {\n  \"title\": \"An Apache Airflow - GCS and Cloud Pub/Sub\",\n  \"keywords\": \"Airflow, GKE, Google Cloud Storage, GCS, Cloud Pub/Sub, Cloud Sql\",\n  \"order\": -30\n};\n    ","import React from \"react\";\r\nimport ContentComponent from 'D:/projects/flash/packages/act-labs-blog/src/content/posts/airflow-gke-getting-started.md';\r\nimport OneColumnLayout from 'components/page-layout';\r\n\r\nexport default function SnippetsLayout(props) {\r\n    return <OneColumnLayout {...props}><ContentComponent {...props}/></OneColumnLayout>\r\n}\r\n\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Helmet from 'react-helmet'\r\nimport { StaticQuery, graphql } from 'gatsby'\r\n\r\nfunction SEO({ description, lang, meta, keywords, title }) {\r\n  return (\r\n    <StaticQuery\r\n      query={detailsQuery}\r\n      render={data => {\r\n        if (typeof keywords == \"string\"){\r\n          keywords = keywords.split(\",\").map(v => v.trim());\r\n        }\r\n        description = description || data.site.siteMetadata.description\r\n        return (\r\n          <Helmet\r\n            htmlAttributes={{\r\n              lang,\r\n            }}\r\n            title={title}\r\n            titleTemplate={`%s | ${data.site.siteMetadata.project}`}\r\n            meta={[\r\n              {\r\n                name: 'description',\r\n                content: description,\r\n              },\r\n              {\r\n                property: 'og:title',\r\n                content: title,\r\n              },\r\n              {\r\n                property: 'og:description',\r\n                content: description,\r\n              },\r\n              {\r\n                property: 'og:type',\r\n                content: 'website',\r\n              },\r\n              {\r\n                name: 'twitter:card',\r\n                content: 'summary',\r\n              },\r\n              {\r\n                name: 'twitter:creator',\r\n                content: data.site.siteMetadata.author,\r\n              },\r\n              {\r\n                name: 'twitter:title',\r\n                content: title,\r\n              },\r\n              {\r\n                name: 'twitter:description',\r\n                content: description,\r\n              },\r\n            ]\r\n              .concat(\r\n                keywords\r\n                  ? {\r\n                      name: 'keywords',\r\n                      content: keywords.join(', '),\r\n                    }\r\n                  : []\r\n              )\r\n              .concat(meta)}\r\n          />\r\n        )\r\n      }}\r\n    />\r\n  )\r\n}\r\n\r\nSEO.defaultProps = {\r\n  lang: 'en',\r\n  meta: [],\r\n  keywords: null,\r\n}\r\n\r\nSEO.propTypes = {\r\n  description: PropTypes.string,\r\n  lang: PropTypes.string,\r\n  meta: PropTypes.array,\r\n  keywords: PropTypes.oneOfType([\r\n    PropTypes.string,\r\n    PropTypes.arrayOf(PropTypes.string)\r\n  ]),\r\n  title: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default SEO\r\n\r\nconst detailsQuery = graphql`\r\n  query DefaultSEOQuery {\r\n    site {\r\n      siteMetadata {\r\n        project\r\n        description\r\n        author\r\n      }\r\n    }\r\n  }\r\n`\r\n","import React from 'react'\r\nimport { StaticQuery, graphql } from 'gatsby'\r\nimport Img from 'gatsby-image'\r\n\r\n\r\nexport default function Logo(){\r\n        return (<StaticQuery\r\n            query={graphql`\r\n                query {\r\n                    logo: file(relativePath: { eq: \"logo.png\" }) {\r\n                    childImageSharp {\r\n                        fixed(height: 60) {\r\n                        ...GatsbyImageSharpFixed\r\n                        }\r\n                    }\r\n                    }\r\n                }\r\n            `}\r\n            render={data => <Img fixed={data.logo.childImageSharp.fixed} style={{float:\"left\"}}/>}\r\n        />)\r\n    }\r\n\r\n","import React from \"react\"\r\nimport { StaticQuery, graphql } from 'gatsby'\r\n\r\nimport {Link} from \"actb\";\r\nimport {\r\n    Layout, Icon\r\n  } from 'antd';\r\n  \r\n  const {\r\n    Footer\r\n  } = Layout;\r\n\r\n\r\nexport function ActFooter({social, copyright}){\r\n    const icons = social.map(({link, icon})=><Link key={icon} to={link}><Icon type={icon}  style={{ fontSize: '24px', marginLeft:10, color: 'rgba(0, 0, 0, 0.65)'}} /></Link>)\r\n    return (\r\n        <Footer style={{ textAlign: 'center' }}>\r\n            <div>{copyright}<div style={{float:\"right\"}}>{icons}</div></div>\r\n        </Footer>\r\n    )\r\n}\r\n\r\nexport default function SiteFooter(props){\r\n  if (props.social){\r\n      return <ActFooter {...props}/>\r\n  }\r\n  return <StaticQuery\r\n  query={graphql`\r\n    query {\r\n      config: configYaml(fields:{slug: {eq:\"/config/main/\"}}){\r\n          copyright\r\n          social {\r\n              icon\r\n              link\r\n          }        \r\n      }\r\n    }\r\n  `}\r\n  render={({config:{social, copyright}}) => <ActFooter social={social} copyright={copyright} {...props} />}\r\n/>\r\n}  ","import React from \"react\";\r\nimport {Logo, Link} from \"actb\"\r\nimport { StaticQuery, graphql } from 'gatsby'\r\n\r\nimport {\r\n  Layout, Menu\r\n} from 'antd';\r\n  \r\nconst {\r\n  Header\r\n} = Layout;\r\n\r\n\r\nexport function NavigationBar({nav}){  \r\n    return (\r\n      <Header className=\"navigation-bar\">\r\n        <Link to=\"/\" ><Logo/></Link>\r\n        <Menu\r\n            theme=\"dark\"\r\n            mode=\"horizontal\"\r\n            defaultSelectedKeys={ nav.filter(v=>v.selected).map(v=>v.text) }\r\n            style={{ lineHeight: '64px' }}\r\n        >\r\n          {\r\n            nav.map(({slug, text}, i)=>\r\n              <Menu.Item key={i}>\r\n                <Link to={slug || \"/\"} >{text}</Link>\r\n              </Menu.Item>\r\n            )\r\n          }  \r\n        </Menu>\r\n      </Header>\r\n    )\r\n} \r\n\r\nexport default function SiteNavigationBar(props){\r\n    if (props.nav){\r\n        return <NavigationBar {...props}/>\r\n    }\r\n    return <StaticQuery\r\n    query={graphql`\r\n      query {\r\n        config: configYaml(fields:{slug: {eq:\"/config/main/\"}}){\r\n            nav {\r\n                text\r\n                slug\r\n            }        \r\n        }\r\n      }\r\n    `}\r\n    render={({config:{nav}}) => <NavigationBar nav={nav} {...props} />}\r\n  />\r\n}  ","import React from \"react\"\r\n\r\nimport {Seo, Footer, NavigationBar} from \"actb\";\r\n\r\nimport {\r\n    Layout\r\n  } from 'antd';\r\n  \r\nimport \"./layout.less\"\r\n\r\nconst {\r\n  Content, Sider\r\n} = Layout;\r\n\r\n\r\nexport function Panel(props){\r\n  const {style, children, ...other} = props\r\n    return (\r\n        <Content style={Object.assign({ padding: '5px 24px' }, style)} {...other}>\r\n            {children}                     \r\n        </Content>\r\n    )\r\n}\r\n\r\nexport function SideMenuPanel({children, menu}){\r\n    return (\r\n      <Layout style={{ padding: '1em 0', background: '#fff', minHeight: 1000 }}>\r\n        <Sider width={200}>\r\n          {menu}\r\n        </Sider>\r\n        <Panel>{children}</Panel>\r\n      </Layout>\r\n    );\r\n  }\r\n\r\nexport default function PageLayout(props){\r\n  const {children, className, \r\n    title, description, keywords, style, layout} = props\r\n  const {footer, fullHeight} = Object.assign({}, defaultLayoutOptions, layout)\r\n  const layoutStyle = Object.assign({}, fullHeight?{height:\"100%\"}:null, style)\r\n  const pageClassName = (className? className + \" \" : \"\") + \"page-layout\"\r\n  return (\r\n    <Layout className={pageClassName} style={layoutStyle}>\r\n      <Seo title={title} keywords={keywords} description={description} />\r\n      <NavigationBar/>\r\n        {children}\r\n      {footer? <Footer/>:null}\r\n    </Layout>\r\n  );  \r\n}\r\n\r\nconst defaultLayoutOptions = {\r\n  footer: true\r\n}\r\n\r\nPageLayout.Panel = Panel;\r\nPageLayout.SideMenuPanel = SideMenuPanel; \r\n","import React from \"react\";\r\nimport { Light as SyntaxHighlighter } from \"react-syntax-highlighter\";\r\nimport js from 'react-syntax-highlighter/dist/esm/languages/hljs/javascript';\r\nimport bash from 'react-syntax-highlighter/dist/esm/languages/hljs/bash';\r\nimport markdown from 'react-syntax-highlighter/dist/esm/languages/hljs/markdown';\r\nimport yaml from 'react-syntax-highlighter/dist/esm/languages/hljs/yaml';\r\nimport dockerfile from 'react-syntax-highlighter/dist/esm/languages/hljs/dockerfile';\r\n\r\nimport { github as style } from 'react-syntax-highlighter/dist/styles/hljs';\r\n\r\nSyntaxHighlighter.registerLanguage('javascript', js);\r\nSyntaxHighlighter.registerLanguage('sh', bash);\r\nSyntaxHighlighter.registerLanguage('markdown', markdown);\r\nSyntaxHighlighter.registerLanguage('yaml', yaml);\r\nSyntaxHighlighter.registerLanguage('dockerfile', dockerfile);\r\n\r\nexport {SyntaxHighlighter};\r\n\r\nexport default function Code(props) {\r\n    let lang = 'bash'\r\n    if (props.className){\r\n      const name = props.className.split(\"-\");\r\n      if (name.length > 1){\r\n        lang = name[1]\r\n      }\r\n    }\r\n  \r\n    return <SyntaxHighlighter language={lang} style={style}>{props.children}</SyntaxHighlighter>\r\n}","import React from \"react\";\r\nimport { MDXProvider } from '@mdx-js/tag';\r\n\r\nimport {Code, Link} from \"actb\";\r\n\r\nexport const components = {\r\n    code: Code,\r\n    a: Link\r\n  };\r\n  \r\nconst defaults = {components}; \r\n\r\nexport default function MDX(props){\r\n    const {components, children} = Object.assign({}, defaults, props);\r\n\r\n    return (\r\n    <MDXProvider components={components}>\r\n        {children}\r\n    </MDXProvider>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport {Mdx, Layout} from \"actb\"\r\nimport '../actb/layout/simple.css'\r\n\r\nconst Panel = Layout.Panel\r\n\r\nexport default function DefaultSiteLayout({children, pageContext}){\r\n  const context = Object.assign({frontmatter:{}}, pageContext)\r\n  const props = Object.assign({}, {layout:context.layout}, context.frontmatter);\r\n  return (\r\n    <Layout {...props}>\r\n      <Panel style={{ paddingTop: \"1em\"}}>\r\n        {props.title? <h1>{props.title}</h1>:null}\r\n        <Mdx>{children}</Mdx>\r\n      </Panel>\r\n    </Layout>\r\n  )\r\n}\r\n\r\n\r\n"],"sourceRoot":""}