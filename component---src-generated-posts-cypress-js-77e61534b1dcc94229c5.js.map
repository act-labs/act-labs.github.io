{"version":3,"sources":["webpack:///./src/content/posts/cypress.md","webpack:///./src/generated/posts/cypress.js","webpack:///./src/actb/seo.js","webpack:///./src/actb/logo.js","webpack:///./src/actb/footer.js","webpack:///./src/actb/navigation-bar.js","webpack:///./src/actb/layout/index.js","webpack:///./src/actb/code.js","webpack:///./src/actb/mdx.js","webpack:///./src/components/page-layout.js"],"names":["MDXContent","props","_this","_React$Component","call","this","layout","render","_this$props","components","objectWithoutPropertiesLoose_default","react_default","a","createElement","dist","name","parentName","className","React","Component","SnippetsLayout","page_layout","cypress_MDXContent","__webpack_require__","d","__webpack_exports__","SEO","_ref","description","lang","meta","keywords","title","react__WEBPACK_IMPORTED_MODULE_2___default","gatsby__WEBPACK_IMPORTED_MODULE_5__","query","detailsQuery","data","split","map","v","trim","site","siteMetadata","react_helmet__WEBPACK_IMPORTED_MODULE_4___default","htmlAttributes","titleTemplate","project","content","property","author","concat","join","_public_static_d_304502870_json__WEBPACK_IMPORTED_MODULE_1__","defaultProps","propTypes","PropTypes","string","array","oneOfType","arrayOf","isRequired","Logo","gatsby__WEBPACK_IMPORTED_MODULE_3__","gatsby_image__WEBPACK_IMPORTED_MODULE_4___default","fixed","logo","childImageSharp","style","float","_public_static_d_2369744027_json__WEBPACK_IMPORTED_MODULE_1__","Footer","ActFooter","social","copyright","icons","_ref2","link","icon","actb_link","key","to","icon_default","type","fontSize","marginLeft","color","textAlign","SiteFooter","gatsby_browser_entry","_ref3","_ref3$config","config","Object","assign","_2743462859","Header","NavigationBar","nav","menu_default","theme","mode","defaultSelectedKeys","filter","selected","text","lineHeight","i","slug","Item","SiteNavigationBar","_1250442554","Content","Sider","Panel","children","other","padding","PageLayout","_Object$assign","defaultLayoutOptions","footer","fullHeight","layoutStyle","height","pageClassName","layout_default","seo","SideMenuPanel","menu","background","minHeight","width","SyntaxHighlighter","registerLanguage","js","bash","markdown","yaml","dockerfile","defaults","code","length","light","language","MDX","actb_src_actb_layout__WEBPACK_IMPORTED_MODULE_2__","DefaultSiteLayout","pageContext","context","frontmatter","react__WEBPACK_IMPORTED_MODULE_3___default","paddingTop","actb_src_actb_mdx__WEBPACK_IMPORTED_MODULE_0__"],"mappings":"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","file":"component---src-generated-posts-cypress-js-77e61534b1dcc94229c5.js","sourcesContent":["import React from 'react'\nimport { MDXTag } from '@mdx-js/tag'\n\n\nconst layoutProps = {};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.layout = null;\n  }\n\n  render() {\n    const {\n      components,\n      ...props\n    } = this.props;\n    return <MDXTag name=\"wrapper\" components={components}><MDXTag name=\"p\" components={components}>{`Today, in the era of mature web technologies, developers have a wide choice of various libraries, CSS frameworks, React components, etc. As a result, the development of web applications became the art of mixing and matching. Not a surprise, integration testing is also widely adopted as an important part of the development process. Luckily, new and emerging tools make e2e and integration testing more and more affordable. If previously integration testing was often done by separate developers working usually in big companies, today, for many, it is a starting point of development process. Indeed, in the last decade the idea to start development from user stories was rapidly gaining traction. Now many teams fall back to ordinary TDD only in case of BDD test failure (so called Double Loop Testing). For those who missed the trend or just looking for fun facts/overview, here is some assortment of techniques of BDD testing using popular `}<MDXTag name=\"em\" components={components} parentName=\"p\">{`Cypress`}</MDXTag>{` testing framework.`}</MDXTag>\n      <MDXTag name=\"h2\" components={components}>{`Commands and Page Objects`}</MDXTag>\n      <MDXTag name=\"p\" components={components}>{`Writing Cypress tests is very easy. After simple installation you are ready to go: just write your first spec in `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`cypress/integration`}</MDXTag>{` folder. While getting started and writing tests is simple, test structure deserves some consideration. Just to demonstrate some common techniques, lets take the simplest counter component as an example:`}</MDXTag>\n      <MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\n          \"className\": \"language-javascript\"\n        }}>{`export const Counter: React.FC = () => {\n    const [counter, setCounter] = useState<number>(0)\n\n    return (\n        <div data-testid=\"counter\">\n            <button onClick={() => setCounter(v => v + 1)}>Inc</button>\n            <div>{counter}</div>\n        </div>\n    )\n}\n`}</MDXTag></MDXTag>\n      <MDXTag name=\"p\" components={components}>{`As CSS selectors could be used to reference HTML elements, code to check counter value is simple enough:`}</MDXTag>\n      <MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\n          \"className\": \"language-javascript\"\n        }}>{`it('counter is incremented on click', () => {\n    cy.visit()\n    cy.get(\\`[data-testid=\"counter\"]\\`).contains(\"Inc\").click()\n    cy.get(\\`[data-testid=\"counter\"]\\`).find(\">div\").should(\"contain\", \"1\")\n})\n`}</MDXTag></MDXTag>\n      <MDXTag name=\"p\" components={components}>{`The problem with the code above is that we select counter component in two places: when searching for button and when verifying counter value. In this particular case this could be easily solved, for example, by simple aliasing `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`.as(\"@counter\")`}</MDXTag>{`. But, what if the component tested is much bigger, contains many elements and non-trivial logic, or is referenced in multiple test cases, or maybe even in multiple specs?`}</MDXTag>\n      <MDXTag name=\"p\" components={components}>{`The first impulse could be to use Cypress `}<MDXTag name=\"em\" components={components} parentName=\"p\">{`commands`}</MDXTag>{`. Though a useful tool, it doesn't look like a good fit in this particular case. What are the drawbacks? First, such commands will eventually inevitably accumulate a lot of Domain logic. Event in our, simplest case, we will need to follow Domain specific naming conventions, in DDD parlance, use so called Ubiquitous Language. Cypress specific files are evidently a wrong place for anything application specific. Especially taking into account that the `}<MDXTag name=\"em\" components={components} parentName=\"p\">{`command`}</MDXTag>{` is a limited and non-standard concept. So it is better to reserve commands for generic, widely reused, test specific helpers. For example, in our case, we can use commands to create `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`getByTestId`}</MDXTag>{` helper function:`}</MDXTag>\n      <MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\n          \"className\": \"language-javascript\"\n        }}>{`// cypress/support/commands.js\nCypress.Commands.add('getByTestId', {\n    prevSubject: 'optional'\n  }, (subject, id) => {\n    if (subject) {\n        return subject.find(\\`[data-testid=\"\\${id}\"]\\`)\n    } else {\n      return cy.get(\\`[data-testid=\"\\${id}\"]\\`)\n    }\n}\n`}</MDXTag></MDXTag>\n      <MDXTag name=\"p\" components={components}>{`But to encapsulate app specific access patterns it is better to use standard JavaScript classes:`}</MDXTag>\n      <MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\n          \"className\": \"language-javascript\"\n        }}>{`export class PageObject {\n    counterBlock () {\n        return cy.getByTestId(\"counter\")\n    }\n}\n`}</MDXTag></MDXTag>\n      <MDXTag name=\"p\" components={components}>{`In which case we can rewrite our test as:`}</MDXTag>\n      <MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\n          \"className\": \"language-javascript\"\n        }}>{`it('counter is incremented on click', () => {\n    const page = new PageObject()\n    cy.visit()\n    page.counterBlock().contains(\"Inc\").click()\n    page.counterBlock().find(\">div\").should(\"contain\", \"1\")\n})\n`}</MDXTag></MDXTag>\n      <MDXTag name=\"p\" components={components}>{`Now, it looks much better: element selection is encapsulated in one function. One may wish not to stop here but proceed further, encapsulating access to other elements of component (button and counter). As Cypress test files may import any files from the project, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`PageObject`}</MDXTag>{` could be defined near component itself, so it can easily reuse code from application (or Jest fixtures). The technique demonstrated is known under the name `}<MDXTag name=\"em\" components={components} parentName=\"p\">{`Page Object`}</MDXTag>{` and is widely adopted across developers community.`}</MDXTag>\n      <MDXTag name=\"p\" components={components}>{`Words of caution are in order though: when using `}<MDXTag name=\"em\" components={components} parentName=\"p\">{`Page Object`}</MDXTag>{`, tests may become strongly coupled with HTML mark-up and fragile. This is because developers can be tempted to overgeneralize, turning Page Object into essentially powerful API, capable of full application control. Which is actually non-trivial task, requiring a lot of development effort without any business value.`}</MDXTag>\n      <MDXTag name=\"p\" components={components}>{`Still, for those who are able to avoid pitfalls of overgeneralization, page objects may serve as a convenient and helpful tool. At the very least, it is after all a better alternative than Cypress commands.`}</MDXTag>\n      <MDXTag name=\"h2\" components={components}>{`Application actions`}</MDXTag>\n      <MDXTag name=\"p\" components={components}>{`An alternative technique to control tested page goes under the name `}<MDXTag name=\"em\" components={components} parentName=\"p\">{`Application actions`}</MDXTag>{`. The idea is that since Cypress tests run in the same environment as page code, tests and application can interact with each other using global `}<MDXTag name=\"em\" components={components} parentName=\"p\">{`model`}</MDXTag>{` (API) objects. Application may, for example, conditionally, for non-production environments, expose some API:`}</MDXTag>\n      <MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\n          \"className\": \"language-javascript\"\n        }}>{`if (process.env.NODE_ENV !== 'production') {\n    window[\"app\"] = new ApplicationActions()\n}\n`}</MDXTag></MDXTag>\n      <MDXTag name=\"p\" components={components}>{`When such an API becomes available, tests gain much better control over tested components. For example, instead of reproducing long sequences of user actions, test may just set application state, reusing already existing application codebase. Consider a capped counter component with maximum value 10, reached after first 10 clicks (a very contrived, artificial example, just to illustrate the point):`}</MDXTag>\n      <MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\n          \"className\": \"language-javascript\"\n        }}>{`export const CappedCounter: React.FC = () => {\n    const counter = useCounter()\n\n    return (\n        <div data-testid=\"capped-counter\">\n            <button onClick={() => dispatch(incCounter())}>Inc</button>\n            <div>{counter > 10 ? 10 : counter}</div>\n        </div>\n    )\n}\n`}</MDXTag></MDXTag>\n      <MDXTag name=\"p\" components={components}>{`Without access to any API test would need to click button 10 times to reach the upper limit (which we, supposedly, would like to test). Things change if we add some API:`}</MDXTag>\n      <MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\n          \"className\": \"language-javascript\"\n        }}>{`export class ApplicationActions {\n    select(selector) {\n        return store.select(selector)\n    }\n\n    dispatch(action: any) {\n        store.dispatch(action)\n    }\n\n    getCounter = () => {\n        return this.select(getCounter)\n    }\n\n    setCounter = (v: number) => {\n        return this.dispatch(setCounter(v))\n    }\n}\n`}</MDXTag></MDXTag>\n      <MDXTag name=\"p\" components={components}>{`When developing applications using Redux, such API comes practically for free: thanks to reuse of application selectors/actions. In case of counter, Redux actions could be used to quickly setup initial counter state:`}</MDXTag>\n      <MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\n          \"className\": \"language-javascript\"\n        }}>{`it.only('capped counter', () => {\n    const page = new PageObject()\n    cy.visit()\n    cy.window().its('app').invoke(\"setCounter\", 10)\n    page.cappedCounterBlock().find(\">div\").should(\"contain\", \"10\")\n})\n`}</MDXTag></MDXTag>\n      <MDXTag name=\"p\" components={components}>{`Although sometimes Application Actions are contrasted with Page Objects, this example demonstrates that, they can play nicely together. Page Object even could be used to hide Application Action invocation boilerplate.`}</MDXTag>\n      <MDXTag name=\"p\" components={components}>{`In addition to easy initial test setup, Application Actions, open many possibilities: assertions on application state, logging, synchronization, etc. Again, this powerful tool comes with responsibility: after all one must always remember, that our goal is to test features, not the implementation.`}</MDXTag>\n      <MDXTag name=\"h2\" components={components}>{`Cucumber`}</MDXTag>\n      <MDXTag name=\"p\" components={components}>{`The main idea of BDD is that examples of user behavior is the best specification. Most consistently and explicitly this idea is implemented in Cucumber tests. There, every test is first written using standard \"given\", \"when\", \"then\" format in ordinary text `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`*.feature`}</MDXTag>{` files:`}</MDXTag>\n      <MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\n          \"className\": \"language-yaml\"\n        }}>{`Feature: Likes\n\n  Scenario: Simple counter\n    Given I opened a page\n    When I click on the button\n    Then Counter becomes equal to \"1\"\n`}</MDXTag></MDXTag>\n      <MDXTag name=\"p\" components={components}>{`Cucumber framework deserves separate article(s). Here there is just enough space to introduce the main idea.`}</MDXTag>\n      <MDXTag name=\"p\" components={components}>{`In Cypress, plugin `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`cypress-cucumber-preprocessor`}</MDXTag>{` allows to add feature files and bind Scenario steps to their implementation in step files:`}</MDXTag>\n      <MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\n          \"className\": \"language-javascript\"\n        }}>{`import { Given, When, Then } from \"cypress-cucumber-preprocessor/steps\";\n\nGiven('I opened a new page', () => {\n  cy.visit()\n})\n\n....\n`}</MDXTag></MDXTag>\n      <MDXTag name=\"p\" components={components}>{`Cucumber tests are basically ordinary Cypress tests, in which one may use all the above techniques. The main advantage of Cucumber over ordinary tests is up-to-date documentation. Even non-technical people will be able to read application specifications and understand them. This fosters communication between Domain experts and development team, which could be especially beneficial when business requirements are unclear/shifting. To take full advantage of the Cucumber one will need additional tooling though. While plugin itself is already relatively mature/feature complete, additional software will be required to make documentation easily accessible/maintainable by all team members.`}</MDXTag>\n      <MDXTag name=\"h2\" components={components}>{`Next`}</MDXTag>\n      <MDXTag name=\"p\" components={components}>{`Integration testing is quite easy nowadays and comes with mature tools encouraging best practices. It is a good time to take advantage of the opening opportunities, incorporating available tools and best practices into day to day development workflows.`}</MDXTag>\n           </MDXTag>;\n  }\n\n}\nexport const _frontmatter = {\n  \"title\": \"Integration testing, tips and tricks. Cypress, Page Objects, Application Actions, Cucumber\",\n  \"keywords\": \"Cypress, PageObject, Storybooks, BDD, Cucumber\",\n  \"order\": -10\n};\n    ","import React from \"react\";\r\nimport ContentComponent from 'D:/projects/flash/packages/act-labs-blog/src/content/posts/cypress.md';\r\nimport OneColumnLayout from 'components/page-layout';\r\n\r\nexport default function SnippetsLayout(props) {\r\n    return <OneColumnLayout {...props}><ContentComponent {...props}/></OneColumnLayout>\r\n}\r\n\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Helmet from 'react-helmet'\r\nimport { StaticQuery, graphql } from 'gatsby'\r\n\r\nfunction SEO({ description, lang, meta, keywords, title }) {\r\n  return (\r\n    <StaticQuery\r\n      query={detailsQuery}\r\n      render={data => {\r\n        if (typeof keywords == \"string\"){\r\n          keywords = keywords.split(\",\").map(v => v.trim());\r\n        }\r\n        description = description || data.site.siteMetadata.description\r\n        return (\r\n          <Helmet\r\n            htmlAttributes={{\r\n              lang,\r\n            }}\r\n            title={title}\r\n            titleTemplate={`%s | ${data.site.siteMetadata.project}`}\r\n            meta={[\r\n              {\r\n                name: 'description',\r\n                content: description,\r\n              },\r\n              {\r\n                property: 'og:title',\r\n                content: title,\r\n              },\r\n              {\r\n                property: 'og:description',\r\n                content: description,\r\n              },\r\n              {\r\n                property: 'og:type',\r\n                content: 'website',\r\n              },\r\n              {\r\n                name: 'twitter:card',\r\n                content: 'summary',\r\n              },\r\n              {\r\n                name: 'twitter:creator',\r\n                content: data.site.siteMetadata.author,\r\n              },\r\n              {\r\n                name: 'twitter:title',\r\n                content: title,\r\n              },\r\n              {\r\n                name: 'twitter:description',\r\n                content: description,\r\n              },\r\n            ]\r\n              .concat(\r\n                keywords\r\n                  ? {\r\n                      name: 'keywords',\r\n                      content: keywords.join(', '),\r\n                    }\r\n                  : []\r\n              )\r\n              .concat(meta)}\r\n          />\r\n        )\r\n      }}\r\n    />\r\n  )\r\n}\r\n\r\nSEO.defaultProps = {\r\n  lang: 'en',\r\n  meta: [],\r\n  keywords: null,\r\n}\r\n\r\nSEO.propTypes = {\r\n  description: PropTypes.string,\r\n  lang: PropTypes.string,\r\n  meta: PropTypes.array,\r\n  keywords: PropTypes.oneOfType([\r\n    PropTypes.string,\r\n    PropTypes.arrayOf(PropTypes.string)\r\n  ]),\r\n  title: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default SEO\r\n\r\nconst detailsQuery = graphql`\r\n  query DefaultSEOQuery {\r\n    site {\r\n      siteMetadata {\r\n        project\r\n        description\r\n        author\r\n      }\r\n    }\r\n  }\r\n`\r\n","import React from 'react'\r\nimport { StaticQuery, graphql } from 'gatsby'\r\nimport Img from 'gatsby-image'\r\n\r\n\r\nexport default function Logo(){\r\n        return (<StaticQuery\r\n            query={graphql`\r\n                query {\r\n                    logo: file(relativePath: { eq: \"logo.png\" }) {\r\n                    childImageSharp {\r\n                        fixed(height: 60) {\r\n                        ...GatsbyImageSharpFixed\r\n                        }\r\n                    }\r\n                    }\r\n                }\r\n            `}\r\n            render={data => <Img fixed={data.logo.childImageSharp.fixed} style={{float:\"left\"}}/>}\r\n        />)\r\n    }\r\n\r\n","import React from \"react\"\r\nimport { StaticQuery, graphql } from 'gatsby'\r\n\r\nimport {Link} from \"actb\";\r\nimport {\r\n    Layout, Icon\r\n  } from 'antd';\r\n  \r\n  const {\r\n    Footer\r\n  } = Layout;\r\n\r\n\r\nexport function ActFooter({social, copyright}){\r\n    const icons = social.map(({link, icon})=><Link key={icon} to={link}><Icon type={icon}  style={{ fontSize: '24px', marginLeft:10, color: 'rgba(0, 0, 0, 0.65)'}} /></Link>)\r\n    return (\r\n        <Footer style={{ textAlign: 'center' }}>\r\n            <div>{copyright}<div style={{float:\"right\"}}>{icons}</div></div>\r\n        </Footer>\r\n    )\r\n}\r\n\r\nexport default function SiteFooter(props){\r\n  if (props.social){\r\n      return <ActFooter {...props}/>\r\n  }\r\n  return <StaticQuery\r\n  query={graphql`\r\n    query {\r\n      config: configYaml(fields:{slug: {eq:\"/config/main/\"}}){\r\n          copyright\r\n          social {\r\n              icon\r\n              link\r\n          }        \r\n      }\r\n    }\r\n  `}\r\n  render={({config:{social, copyright}}) => <ActFooter social={social} copyright={copyright} {...props} />}\r\n/>\r\n}  ","import React from \"react\";\r\nimport {Logo, Link} from \"actb\"\r\nimport { StaticQuery, graphql } from 'gatsby'\r\n\r\nimport {\r\n  Layout, Menu\r\n} from 'antd';\r\n  \r\nconst {\r\n  Header\r\n} = Layout;\r\n\r\n\r\nexport function NavigationBar({nav}){  \r\n    return (\r\n      <Header className=\"navigation-bar\">\r\n        <Link to=\"/\" ><Logo/></Link>\r\n        <Menu\r\n            theme=\"dark\"\r\n            mode=\"horizontal\"\r\n            defaultSelectedKeys={ nav.filter(v=>v.selected).map(v=>v.text) }\r\n            style={{ lineHeight: '64px' }}\r\n        >\r\n          {\r\n            nav.map(({slug, text}, i)=>\r\n              <Menu.Item key={i}>\r\n                <Link to={slug || \"/\"} >{text}</Link>\r\n              </Menu.Item>\r\n            )\r\n          }  \r\n        </Menu>\r\n      </Header>\r\n    )\r\n} \r\n\r\nexport default function SiteNavigationBar(props){\r\n    if (props.nav){\r\n        return <NavigationBar {...props}/>\r\n    }\r\n    return <StaticQuery\r\n    query={graphql`\r\n      query {\r\n        config: configYaml(fields:{slug: {eq:\"/config/main/\"}}){\r\n            nav {\r\n                text\r\n                slug\r\n            }        \r\n        }\r\n      }\r\n    `}\r\n    render={({config:{nav}}) => <NavigationBar nav={nav} {...props} />}\r\n  />\r\n}  ","import React from \"react\"\r\n\r\nimport {Seo, Footer, NavigationBar} from \"actb\";\r\n\r\nimport {\r\n    Layout\r\n  } from 'antd';\r\n  \r\nimport \"./layout.less\"\r\n\r\nconst {\r\n  Content, Sider\r\n} = Layout;\r\n\r\n\r\nexport function Panel(props){\r\n  const {style, children, ...other} = props\r\n    return (\r\n        <Content style={Object.assign({ padding: '5px 24px' }, style)} {...other}>\r\n            {children}                     \r\n        </Content>\r\n    )\r\n}\r\n\r\nexport function SideMenuPanel({children, menu}){\r\n    return (\r\n      <Layout style={{ padding: '1em 0', background: '#fff', minHeight: 1000 }}>\r\n        <Sider width={200}>\r\n          {menu}\r\n        </Sider>\r\n        <Panel>{children}</Panel>\r\n      </Layout>\r\n    );\r\n  }\r\n\r\nexport default function PageLayout(props){\r\n  const {children, className, \r\n    title, description, keywords, style, layout} = props\r\n  const {footer, fullHeight} = Object.assign({}, defaultLayoutOptions, layout)\r\n  const layoutStyle = Object.assign({}, fullHeight?{height:\"100%\"}:null, style)\r\n  const pageClassName = (className? className + \" \" : \"\") + \"page-layout\"\r\n  return (\r\n    <Layout className={pageClassName} style={layoutStyle}>\r\n      <Seo title={title} keywords={keywords} description={description} />\r\n      <NavigationBar/>\r\n        {children}\r\n      {footer? <Footer/>:null}\r\n    </Layout>\r\n  );  \r\n}\r\n\r\nconst defaultLayoutOptions = {\r\n  footer: true\r\n}\r\n\r\nPageLayout.Panel = Panel;\r\nPageLayout.SideMenuPanel = SideMenuPanel; \r\n","import React from \"react\";\r\nimport { Light as SyntaxHighlighter } from \"react-syntax-highlighter\";\r\nimport js from 'react-syntax-highlighter/dist/esm/languages/hljs/javascript';\r\nimport bash from 'react-syntax-highlighter/dist/esm/languages/hljs/bash';\r\nimport markdown from 'react-syntax-highlighter/dist/esm/languages/hljs/markdown';\r\nimport yaml from 'react-syntax-highlighter/dist/esm/languages/hljs/yaml';\r\nimport dockerfile from 'react-syntax-highlighter/dist/esm/languages/hljs/dockerfile';\r\n\r\nimport { github as style } from 'react-syntax-highlighter/dist/styles/hljs';\r\n\r\nSyntaxHighlighter.registerLanguage('javascript', js);\r\nSyntaxHighlighter.registerLanguage('sh', bash);\r\nSyntaxHighlighter.registerLanguage('markdown', markdown);\r\nSyntaxHighlighter.registerLanguage('yaml', yaml);\r\nSyntaxHighlighter.registerLanguage('dockerfile', dockerfile);\r\n\r\nexport {SyntaxHighlighter};\r\n\r\nexport default function Code(props) {\r\n    let lang = 'bash'\r\n    if (props.className){\r\n      const name = props.className.split(\"-\");\r\n      if (name.length > 1){\r\n        lang = name[1]\r\n      }\r\n    }\r\n  \r\n    return <SyntaxHighlighter language={lang} style={style}>{props.children}</SyntaxHighlighter>\r\n}","import React from \"react\";\r\nimport { MDXProvider } from '@mdx-js/tag';\r\n\r\nimport {Code, Link} from \"actb\";\r\n\r\nexport const components = {\r\n    code: Code,\r\n    a: Link\r\n  };\r\n  \r\nconst defaults = {components}; \r\n\r\nexport default function MDX(props){\r\n    const {components, children} = Object.assign({}, defaults, props);\r\n\r\n    return (\r\n    <MDXProvider components={components}>\r\n        {children}\r\n    </MDXProvider>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport {Mdx, Layout} from \"actb\"\r\nimport '../actb/layout/simple.css'\r\n\r\nconst Panel = Layout.Panel\r\n\r\nexport default function DefaultSiteLayout({children, pageContext}){\r\n  const context = Object.assign({frontmatter:{}}, pageContext)\r\n  const props = Object.assign({}, {layout:context.layout}, context.frontmatter);\r\n  return (\r\n    <Layout {...props}>\r\n      <Panel style={{ paddingTop: \"1em\"}}>\r\n        {props.title? <h1>{props.title}</h1>:null}\r\n        <Mdx>{children}</Mdx>\r\n      </Panel>\r\n    </Layout>\r\n  )\r\n}\r\n\r\n\r\n"],"sourceRoot":""}