{"version":3,"sources":["webpack:///./src/content/posts/facenet-clustering.md","webpack:///./src/generated/posts/facenet-clustering.js","webpack:///./src/actb/seo.js","webpack:///./src/actb/logo.js","webpack:///./src/actb/footer.js","webpack:///./src/actb/navigation-bar.js","webpack:///./src/actb/layout/index.js","webpack:///./src/actb/code.js","webpack:///./src/actb/mdx.js","webpack:///./src/components/page-layout.js"],"names":["MDXContent","props","_this","_React$Component","call","this","layout","render","_this$props","components","objectWithoutPropertiesLoose_default","react_default","a","createElement","dist","name","parentName","href","className","image_hamilton_clusters","image_friends_clusters","image_hamilton_example_frame","title","React","Component","SnippetsLayout","page_layout","facenet_clustering_MDXContent","__webpack_require__","d","__webpack_exports__","SEO","_ref","description","lang","meta","keywords","react__WEBPACK_IMPORTED_MODULE_2___default","gatsby__WEBPACK_IMPORTED_MODULE_5__","query","detailsQuery","data","split","map","v","trim","site","siteMetadata","react_helmet__WEBPACK_IMPORTED_MODULE_4___default","htmlAttributes","titleTemplate","project","content","property","author","concat","join","_public_static_d_304502870_json__WEBPACK_IMPORTED_MODULE_1__","defaultProps","propTypes","PropTypes","string","array","oneOfType","arrayOf","isRequired","Logo","gatsby__WEBPACK_IMPORTED_MODULE_3__","gatsby_image__WEBPACK_IMPORTED_MODULE_4___default","fixed","logo","childImageSharp","style","float","_public_static_d_2369744027_json__WEBPACK_IMPORTED_MODULE_1__","Footer","ActFooter","social","copyright","icons","_ref2","link","icon","actb_link","key","to","icon_default","type","fontSize","marginLeft","color","textAlign","SiteFooter","gatsby_browser_entry","_ref3","_ref3$config","config","Object","assign","_2743462859","Header","NavigationBar","nav","menu_default","theme","mode","defaultSelectedKeys","filter","selected","text","lineHeight","i","slug","Item","SiteNavigationBar","_1250442554","Content","Sider","Panel","children","other","padding","PageLayout","_Object$assign","defaultLayoutOptions","footer","fullHeight","layoutStyle","height","pageClassName","layout_default","seo","SideMenuPanel","menu","background","minHeight","width","SyntaxHighlighter","registerLanguage","js","bash","markdown","yaml","dockerfile","defaults","code","length","light","language","MDX","actb_src_actb_layout__WEBPACK_IMPORTED_MODULE_2__","DefaultSiteLayout","pageContext","context","frontmatter","react__WEBPACK_IMPORTED_MODULE_3___default","paddingTop","actb_src_actb_mdx__WEBPACK_IMPORTED_MODULE_0__"],"mappings":"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","file":"component---src-generated-posts-facenet-clustering-js-205aca1da1b86584a6ec.js","sourcesContent":["import React from 'react'\nimport { MDXTag } from '@mdx-js/tag'\n\n\nimport { ImageHamiltonClusters, ImageFriendsClusters, ImageHamiltonExampleFrame } from \"actl\";\nconst layoutProps = {};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.layout = null;\n  }\n\n  render() {\n    const {\n      components,\n      ...props\n    } = this.props;\n    return <MDXTag name=\"wrapper\" components={components}>\n      <MDXTag name=\"p\" components={components}>{`Face detection is a desired feature in many applications, ranging from fashion to security. FaceNet is often used for feature embedding in combination with CNN neural networks for face detection. Open source implementations, showing state of the art results on popular datasets, are readily available. As an example, in this blog posts, I take David Sandberg's `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\n          \"href\": \"https://github.com/davidsandberg/facenet\"\n        }}>{`TensorFlow FaceNet`}</MDXTag>{` and build a Python package to process videos, extracting face locations, landmarks, and embeddings. Embeddings allow to group face images using new density based clustering algorithms (`}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\n          \"href\": \"https://hdbscan.readthedocs.io/\"\n        }}>{`hierarchical dbscan`}</MDXTag>{` and `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\n          \"href\": \"https://umap-learn.readthedocs.io\"\n        }}>{`umap`}</MDXTag>{` - density based feature reduction algorithm).`}</MDXTag>\n      <MDXTag name=\"h2\" components={components}>{`FaceNet and MTCNN`}</MDXTag>\n      <MDXTag name=\"p\" components={components}>{`As faces in image may be present in different locations at different scales, to detect them, multi-scale image analyses techniques were developed. The main idea is to check for face presence first on full image. If the test is positive, more detailed tests are repeatedly conducted on smaller image patches. Currently, many libraries provide good face detection implementations, including `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\n          \"href\": \"http://dlib.net/\"\n        }}>{`dlib`}</MDXTag>{` and `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\n          \"href\": \"https://opencv.org/\"\n        }}>{`opencv`}</MDXTag>{`. The recent trend is to use neural network based methods as they outperform feature engineering approaches, showing top notch results on test datasets. Here an open source implementation of Multi-task Cascaded Convolutional Networks, available as python package `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`pip install mtcnn`}</MDXTag>{`, was used. The library is able to both detect multiple faces, and to provide location of faces and face landmarks (nose, eyes, lips, etc).`}</MDXTag>\n      <MDXTag name=\"p\" components={components}>{`In addition to face detection, many applications may need to identify people on images. To accomplish this, algorithms extracting image feature are used. Popular FaceNet neural network architecture could be trained to automatically produce feature vectors, called embeddings. During training, algorithm uses trippet loss function encouraging similar embeddings for images of the same people and different embeddings for different people. As mentioned earlier, here a popular open source `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\n          \"href\": \"https://github.com/davidsandberg/facenet\"\n        }}>{`David Sandberg implementation`}</MDXTag>{` is being used. The `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Facenet`}</MDXTag>{` class is able to load pre-trained TensorFlow models and could be used to generate embeddings.`}</MDXTag>\n      <MDXTag name=\"h2\" components={components}>{`Video preprocessing`}</MDXTag>\n      <MDXTag name=\"p\" components={components}>{`For video/image preprocessing OpenCV library is a common choice. The following simple wrapper simplifies video processing/navigation:`}</MDXTag>\n      <MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\n          \"className\": \"language-python\"\n        }}>{`# video_facenet/video.py\nclass VideoProcessor:\n    def __init__(self, video_path, **kwargs):\n        self.video_path = video_path\n        self.cap = cv2.VideoCapture(video_path)\n        self.id = 0\n        self.data = kwargs           \n\n    @property\n    def duration(self):\n        cap = self.cap\n        fps = cap.get(cv2.CAP_PROP_FPS)\n        frame_count = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))\n        return frame_count/fps\n\n    @property\n    def pos(self):\n        return int(self.cap.get(cv2.CAP_PROP_POS_FRAMES))\n\n    @pos.setter\n    def pos(self, pos):\n        self.id = pos\n        self.cap.set(cv2.CAP_PROP_POS_FRAMES, pos) \n  \n\n    def images(self, start=0, end=None):\n        self.pos = start\n        success, image = self.cap.read()\n        while success:\n            if end is not None and self.id == end:\n                yield image\n                return\n\n            yield image\n            self.id += 1            \n            success, image = self.cap.read()                \n\n    def iterate(self, process, start=0, end=None):\n        last = self.frame_count - 1 if end is None else end \n        for image in self.images(start=start, end=end):\n            if process(image=image, pos=self.id, video=self, last=last, **self.data):\n                break\n`}</MDXTag></MDXTag>\n      <MDXTag name=\"p\" components={components}>{`Flexible data processing is best achieved using functional paradigms. To this end, VideoProcessor's constructor receives additional named parameters, which are then passed further to processing functions (in iterate method). Thus, processing functions should be ready to receive dictionaries of named arguments `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`**kwargs`}</MDXTag>{` which they may pass down the line, or may just choose to ignore. Following this pattern, image processing could be shaped into interchangeable, reusable functions: `}</MDXTag>\n      <MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\n          \"className\": \"language-python\"\n        }}>{`# video_facenet/pipelines.py\ndef process_video(video_path, model_path, start=0, suffix=\"\", batch_size=64, end=None, **kwargs):\n    from video_facenet.facenet import Detector, Facenet\n\n    detector = Detector()\n    encoder = Facenet(\n        model_path=model_path,\n        batch_size=batch_size\n    )\n    faces = []\n\n    save = create_faces_saver(suffix=suffix)\n\n    def process(save, pos, faces, batch_size, last, **kwargs):\n        find_faces(faces=faces, pos=pos, **kwargs)\n        if len(faces) >= batch_size or pos==last:\n            generate_embeddings(faces=faces, **kwargs)\n            save(faces=faces, **kwargs)\n            save.flush()\n            faces.clear()\n            print(\"frame #\", pos)\n\n    video = VideoProcessor(video_path=video_path, detector=detector, encoder=encoder, save=save, faces=faces, batch_size=batch_size)\n    video.iterate(process, start=start, end=end)\n    save.close()\n    detector.close()\n    encoder.close()\n`}</MDXTag></MDXTag>\n      <MDXTag name=\"p\" components={components}>{`The `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`process_video`}</MDXTag>{` function from `}<MDXTag name=\"em\" components={components} parentName=\"p\">{`pipelines.py`}</MDXTag>{` module detects, encodes and saves images in batches in three separate text `}<MDXTag name=\"em\" components={components} parentName=\"p\">{`.csv`}</MDXTag>{` files: face bounding boxes, landmarks, and embeddings (bounding_box_suffix.csv, landmarks_suffix.csv, and embeddings_suffix.csv respectively). A suffix is added to the file names to distinguish different jobs. The start and the end of video could be specified, so processing could be easily parallelized.`}</MDXTag>\n      <MDXTag name=\"h2\" components={components}>{`Clustering faces: HDBSCAN`}</MDXTag>\n      <MDXTag name=\"p\" components={components}>{`Information from text files could be processed further using density based clustering techniques. FaceNet could be seen as probabilistic model generating embeddings in multidimensional embedding space. Embeddings of different people should form distinct dense clusters. One of the popular tools to discover such clusters is DBSCAN, which is shown to give good results for face clustering. Recent algorithm extensions/generalizations, like hierarchical DBSCAN, divide densely populated regions into hierarchical trees to automatically find cluster boundaries based exclusively on available density information. An `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\n          \"href\": \"https://hdbscan.readthedocs.io/\"\n        }}>{`hdbscan`}</MDXTag>{` is a popular DBSCAN extension, implementing scikit-learn interface and playing nicely with the rest of `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`scikit-learn`}</MDXTag>{` ecosystem. As you may see below, for sample short Hamilton video, clustering gives nearly ideal results, grouping together faces of different people and even filtering out the noise - erroneous face boxes (dark points on the plot bellow). Results are illustrated using umap (a density based feature reduction library similar to t-SNE):`}</MDXTag>\n      <ImageHamiltonClusters />\n      <MDXTag name=\"p\" components={components}>{`From this plot, it could be seen that points of embedding space tend to cluster into dense groups. Dense regions could be unevenly shaped, which explains why clustering method like K-mean poorly perform on such tasks. Density based clustering clearly gives better results, though results, in general, may be not that good as in this short sample. For example, relatively rare camera angles, lightning conditions or faces may result in outliers, marked by algorithm as noise. On the other hand, after some time, failures in face detection algorithm tend to produce their own clusters. And on some camera angles/with different lightnings, faces of the same people may fall into different clusters. Another problem is that, as number of embeddings grows (to dozens of thousands), the algorithm performance eventually comes to a halt. `}</MDXTag>\n      <MDXTag name=\"p\" components={components}>{`To some degree, the mentioned problems could be alleviated. First of all, hdbscan package allows not only to assign cluster labels, but also gives estimates of assignment probabilities (for every point/every cluster combination). Assignment probabilities could be also obtained for points not used during training, which mitigates scalability problems. Furthermore, hdbscan could be used in combination with feature reduction algorithms. In addition to standard PCA, density based umap algorithm could be used. Similar to to t-SNE, `}<MDXTag name=\"em\" components={components} parentName=\"p\">{`umap`}</MDXTag>{` is based on point densities but is designed to work not only for visualization, but for feature reduction and even supervised learning. Both umap and hdbscan honer scikit-learn conventions, so could be combined into single scikit-learn Pipeline and tweaked using grid parameter search:`}</MDXTag>\n      <MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\n          \"className\": \"language-python\"\n        }}>{`# video_facenet/hdbscan_clustering.py\ndef cluster_faces_pipeline(reduce):\n    models = []\n    if reduce:\n        models.append(\n            (\"umap\", umap.UMAP(\n                n_neighbors=30,\n                min_dist=0.0,\n                n_components=30,\n                random_state=42,\n            ))\n        )\n    models.append((\"hdbscan\", hdbscan.HDBSCAN (min_cluster_size=15)))\n    return Pipeline(models)\n`}</MDXTag></MDXTag>\n      <MDXTag name=\"p\" components={components}>{`Though, in general, 512 dimensions of facenet embeddings carry very useful information, within similar settings all this information is clearly redundant and just contributes to noise and clustering algorithm confusion. Reducing dimensions to the 20-50 components, one may improve both algorithm accuracy and performance, and, as a result, meaningful clusters for videos with thousand faces become a possibility:`}</MDXTag>\n      <ImageFriendsClusters />\n      <MDXTag name=\"p\" components={components}>{`As unsupervised learning is often exploratory in nature, it is easier to pass parameters/options using configuration `}<MDXTag name=\"em\" components={components} parentName=\"p\">{`yaml`}</MDXTag>{` files:`}</MDXTag>\n      <MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\n          \"className\": \"language-yaml\"\n        }}>{`# tasks.yaml\nhamilton:\n  suffix: hamilton\n  video_path: short_hamilton_clip.mp4\n  model_path: /lab/20180402-114759/facenet.pb\n  umap: false\n  delay: 200\n  parameters:\n    hdbscan__min_cluster_size: 5    \nprocess_hamilton:\n  task: process_video\n  config: hamilton  \n`}</MDXTag></MDXTag>\n      <MDXTag name=\"p\" components={components}>{`Here tasks are defined as named objects, a function name is specified in a `}<MDXTag name=\"em\" components={components} parentName=\"p\">{`\"task\"`}</MDXTag>{` property, and configuration is either specified alongside or is referenced through a `}<MDXTag name=\"em\" components={components} parentName=\"p\">{`\"config\"`}</MDXTag>{` property.`}</MDXTag>\n      <MDXTag name=\"h2\" components={components}>{`Clustering and other ML algorithms`}</MDXTag>\n      <MDXTag name=\"p\" components={components}>{`Clustering algorithms are important in unsupervised/exploratory settings when there are no labeled data, and/or available data should be quickly explored. Thus, frames/images, grouped by clustering algorithms, with probabilities/alternative assignment suggestions, may help to prepare training data for supervised algorithms: `}</MDXTag>\n      <ImageHamiltonExampleFrame />\n      <MDXTag name=\"p\" components={components}>{` Modern density based algorithms allow for supervised learning/classification. As density based algorithms are completely data driven they can make data processing less susceptible to data drifts. On the other hand, such methods come with a number of inherent shortcomings: they poorly generalize to unseen data and have a limited scalability (all points should be kept in memory, compared to a few parameters of neural networks or SVM). As you can see, in case of face detection/recognition, clustering algorithms favorably complement neural networks, helping to prepare training data/providing flexible identification algorithms.`}</MDXTag>\n      <MDXTag name=\"p\" components={components}>{` The source code used in the blog post is available on `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\n          \"href\": \"https://github.com/act-labs/video_facenet/\",\n          \"title\": \"FaceNet clustering for video\"\n        }}>{`Github`}</MDXTag>{` or could be installed through `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`pip install video_facenet`}</MDXTag>{`.`}</MDXTag>\n           </MDXTag>;\n  }\n\n}\nexport const _frontmatter = {\n  \"title\": \"Face clustering using hierarchical density based methods\",\n  \"keywords\": \"ML, FaceNet, Face clustering, TensorFlow, HDBSCAN, umap, density based clustering\",\n  \"order\": 5\n};\n    ","import React from \"react\";\r\nimport ContentComponent from 'D:/projects/flash/packages/act-labs-blog/src/content/posts/facenet-clustering.md';\r\nimport OneColumnLayout from 'components/page-layout';\r\n\r\nexport default function SnippetsLayout(props) {\r\n    return <OneColumnLayout {...props}><ContentComponent {...props}/></OneColumnLayout>\r\n}\r\n\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Helmet from 'react-helmet'\r\nimport { StaticQuery, graphql } from 'gatsby'\r\n\r\nfunction SEO({ description, lang, meta, keywords, title }) {\r\n  return (\r\n    <StaticQuery\r\n      query={detailsQuery}\r\n      render={data => {\r\n        if (typeof keywords == \"string\"){\r\n          keywords = keywords.split(\",\").map(v => v.trim());\r\n        }\r\n        description = description || data.site.siteMetadata.description\r\n        return (\r\n          <Helmet\r\n            htmlAttributes={{\r\n              lang,\r\n            }}\r\n            title={title}\r\n            titleTemplate={`%s | ${data.site.siteMetadata.project}`}\r\n            meta={[\r\n              {\r\n                name: 'description',\r\n                content: description,\r\n              },\r\n              {\r\n                property: 'og:title',\r\n                content: title,\r\n              },\r\n              {\r\n                property: 'og:description',\r\n                content: description,\r\n              },\r\n              {\r\n                property: 'og:type',\r\n                content: 'website',\r\n              },\r\n              {\r\n                name: 'twitter:card',\r\n                content: 'summary',\r\n              },\r\n              {\r\n                name: 'twitter:creator',\r\n                content: data.site.siteMetadata.author,\r\n              },\r\n              {\r\n                name: 'twitter:title',\r\n                content: title,\r\n              },\r\n              {\r\n                name: 'twitter:description',\r\n                content: description,\r\n              },\r\n            ]\r\n              .concat(\r\n                keywords\r\n                  ? {\r\n                      name: 'keywords',\r\n                      content: keywords.join(', '),\r\n                    }\r\n                  : []\r\n              )\r\n              .concat(meta)}\r\n          />\r\n        )\r\n      }}\r\n    />\r\n  )\r\n}\r\n\r\nSEO.defaultProps = {\r\n  lang: 'en',\r\n  meta: [],\r\n  keywords: null,\r\n}\r\n\r\nSEO.propTypes = {\r\n  description: PropTypes.string,\r\n  lang: PropTypes.string,\r\n  meta: PropTypes.array,\r\n  keywords: PropTypes.oneOfType([\r\n    PropTypes.string,\r\n    PropTypes.arrayOf(PropTypes.string)\r\n  ]),\r\n  title: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default SEO\r\n\r\nconst detailsQuery = graphql`\r\n  query DefaultSEOQuery {\r\n    site {\r\n      siteMetadata {\r\n        project\r\n        description\r\n        author\r\n      }\r\n    }\r\n  }\r\n`\r\n","import React from 'react'\r\nimport { StaticQuery, graphql } from 'gatsby'\r\nimport Img from 'gatsby-image'\r\n\r\n\r\nexport default function Logo(){\r\n        return (<StaticQuery\r\n            query={graphql`\r\n                query {\r\n                    logo: file(relativePath: { eq: \"logo.png\" }) {\r\n                    childImageSharp {\r\n                        fixed(height: 60) {\r\n                        ...GatsbyImageSharpFixed\r\n                        }\r\n                    }\r\n                    }\r\n                }\r\n            `}\r\n            render={data => <Img fixed={data.logo.childImageSharp.fixed} style={{float:\"left\"}}/>}\r\n        />)\r\n    }\r\n\r\n","import React from \"react\"\r\nimport { StaticQuery, graphql } from 'gatsby'\r\n\r\nimport {Link} from \"actb\";\r\nimport {\r\n    Layout, Icon\r\n  } from 'antd';\r\n  \r\n  const {\r\n    Footer\r\n  } = Layout;\r\n\r\n\r\nexport function ActFooter({social, copyright}){\r\n    const icons = social.map(({link, icon})=><Link key={icon} to={link}><Icon type={icon}  style={{ fontSize: '24px', marginLeft:10, color: 'rgba(0, 0, 0, 0.65)'}} /></Link>)\r\n    return (\r\n        <Footer style={{ textAlign: 'center' }}>\r\n            <div>{copyright}<div style={{float:\"right\"}}>{icons}</div></div>\r\n        </Footer>\r\n    )\r\n}\r\n\r\nexport default function SiteFooter(props){\r\n  if (props.social){\r\n      return <ActFooter {...props}/>\r\n  }\r\n  return <StaticQuery\r\n  query={graphql`\r\n    query {\r\n      config: configYaml(fields:{slug: {eq:\"/config/main/\"}}){\r\n          copyright\r\n          social {\r\n              icon\r\n              link\r\n          }        \r\n      }\r\n    }\r\n  `}\r\n  render={({config:{social, copyright}}) => <ActFooter social={social} copyright={copyright} {...props} />}\r\n/>\r\n}  ","import React from \"react\";\r\nimport {Logo, Link} from \"actb\"\r\nimport { StaticQuery, graphql } from 'gatsby'\r\n\r\nimport {\r\n  Layout, Menu\r\n} from 'antd';\r\n  \r\nconst {\r\n  Header\r\n} = Layout;\r\n\r\n\r\nexport function NavigationBar({nav}){  \r\n    return (\r\n      <Header className=\"navigation-bar\">\r\n        <Link to=\"/\" ><Logo/></Link>\r\n        <Menu\r\n            theme=\"dark\"\r\n            mode=\"horizontal\"\r\n            defaultSelectedKeys={ nav.filter(v=>v.selected).map(v=>v.text) }\r\n            style={{ lineHeight: '64px' }}\r\n        >\r\n          {\r\n            nav.map(({slug, text}, i)=>\r\n              <Menu.Item key={i}>\r\n                <Link to={slug || \"/\"} >{text}</Link>\r\n              </Menu.Item>\r\n            )\r\n          }  \r\n        </Menu>\r\n      </Header>\r\n    )\r\n} \r\n\r\nexport default function SiteNavigationBar(props){\r\n    if (props.nav){\r\n        return <NavigationBar {...props}/>\r\n    }\r\n    return <StaticQuery\r\n    query={graphql`\r\n      query {\r\n        config: configYaml(fields:{slug: {eq:\"/config/main/\"}}){\r\n            nav {\r\n                text\r\n                slug\r\n            }        \r\n        }\r\n      }\r\n    `}\r\n    render={({config:{nav}}) => <NavigationBar nav={nav} {...props} />}\r\n  />\r\n}  ","import React from \"react\"\r\n\r\nimport {Seo, Footer, NavigationBar} from \"actb\";\r\n\r\nimport {\r\n    Layout\r\n  } from 'antd';\r\n  \r\nimport \"./layout.less\"\r\n\r\nconst {\r\n  Content, Sider\r\n} = Layout;\r\n\r\n\r\nexport function Panel(props){\r\n  const {style, children, ...other} = props\r\n    return (\r\n        <Content style={Object.assign({ padding: '5px 24px' }, style)} {...other}>\r\n            {children}                     \r\n        </Content>\r\n    )\r\n}\r\n\r\nexport function SideMenuPanel({children, menu}){\r\n    return (\r\n      <Layout style={{ padding: '1em 0', background: '#fff', minHeight: 1000 }}>\r\n        <Sider width={200}>\r\n          {menu}\r\n        </Sider>\r\n        <Panel>{children}</Panel>\r\n      </Layout>\r\n    );\r\n  }\r\n\r\nexport default function PageLayout(props){\r\n  const {children, className, \r\n    title, description, keywords, style, layout} = props\r\n  const {footer, fullHeight} = Object.assign({}, defaultLayoutOptions, layout)\r\n  const layoutStyle = Object.assign({}, fullHeight?{height:\"100%\"}:null, style)\r\n  const pageClassName = (className? className + \" \" : \"\") + \"page-layout\"\r\n  return (\r\n    <Layout className={pageClassName} style={layoutStyle}>\r\n      <Seo title={title} keywords={keywords} description={description} />\r\n      <NavigationBar/>\r\n        {children}\r\n      {footer? <Footer/>:null}\r\n    </Layout>\r\n  );  \r\n}\r\n\r\nconst defaultLayoutOptions = {\r\n  footer: true\r\n}\r\n\r\nPageLayout.Panel = Panel;\r\nPageLayout.SideMenuPanel = SideMenuPanel; \r\n","import React from \"react\";\r\nimport { Light as SyntaxHighlighter } from \"react-syntax-highlighter\";\r\nimport js from 'react-syntax-highlighter/dist/esm/languages/hljs/javascript';\r\nimport bash from 'react-syntax-highlighter/dist/esm/languages/hljs/bash';\r\nimport markdown from 'react-syntax-highlighter/dist/esm/languages/hljs/markdown';\r\nimport yaml from 'react-syntax-highlighter/dist/esm/languages/hljs/yaml';\r\nimport dockerfile from 'react-syntax-highlighter/dist/esm/languages/hljs/dockerfile';\r\n\r\nimport { github as style } from 'react-syntax-highlighter/dist/styles/hljs';\r\n\r\nSyntaxHighlighter.registerLanguage('javascript', js);\r\nSyntaxHighlighter.registerLanguage('sh', bash);\r\nSyntaxHighlighter.registerLanguage('markdown', markdown);\r\nSyntaxHighlighter.registerLanguage('yaml', yaml);\r\nSyntaxHighlighter.registerLanguage('dockerfile', dockerfile);\r\n\r\nexport {SyntaxHighlighter};\r\n\r\nexport default function Code(props) {\r\n    let lang = 'bash'\r\n    if (props.className){\r\n      const name = props.className.split(\"-\");\r\n      if (name.length > 1){\r\n        lang = name[1]\r\n      }\r\n    }\r\n  \r\n    return <SyntaxHighlighter language={lang} style={style}>{props.children}</SyntaxHighlighter>\r\n}","import React from \"react\";\r\nimport { MDXProvider } from '@mdx-js/tag';\r\n\r\nimport {Code, Link} from \"actb\";\r\n\r\nexport const components = {\r\n    code: Code,\r\n    a: Link\r\n  };\r\n  \r\nconst defaults = {components}; \r\n\r\nexport default function MDX(props){\r\n    const {components, children} = Object.assign({}, defaults, props);\r\n\r\n    return (\r\n    <MDXProvider components={components}>\r\n        {children}\r\n    </MDXProvider>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport {Mdx, Layout} from \"actb\"\r\nimport '../actb/layout/simple.css'\r\n\r\nconst Panel = Layout.Panel\r\n\r\nexport default function DefaultSiteLayout({children, pageContext}){\r\n  const context = Object.assign({frontmatter:{}}, pageContext)\r\n  const props = Object.assign({}, {layout:context.layout}, context.frontmatter);\r\n  return (\r\n    <Layout {...props}>\r\n      <Panel style={{ paddingTop: \"1em\"}}>\r\n        {props.title? <h1>{props.title}</h1>:null}\r\n        <Mdx>{children}</Mdx>\r\n      </Panel>\r\n    </Layout>\r\n  )\r\n}\r\n\r\n\r\n"],"sourceRoot":""}