{"version":3,"sources":["webpack:///./src/content/posts/mysql-express.md","webpack:///./src/generated/posts/mysql-express.js","webpack:///./src/actb/seo.js","webpack:///./src/actb/logo.js","webpack:///./src/actb/footer.js","webpack:///./src/actb/navigation-bar.js","webpack:///./src/actb/layout/index.js","webpack:///./src/actb/code.js","webpack:///./src/actb/mdx.js","webpack:///./src/components/page-layout.js"],"names":["MDXContent","props","_this","_React$Component","call","this","layout","render","_this$props","components","objectWithoutPropertiesLoose_default","react_default","a","createElement","dist","name","parentName","href","title","className","React","Component","SnippetsLayout","page_layout","mysql_express_MDXContent","__webpack_require__","d","__webpack_exports__","SEO","_ref","description","lang","meta","keywords","react__WEBPACK_IMPORTED_MODULE_2___default","gatsby__WEBPACK_IMPORTED_MODULE_5__","query","detailsQuery","data","split","map","v","trim","site","siteMetadata","react_helmet__WEBPACK_IMPORTED_MODULE_4___default","htmlAttributes","titleTemplate","project","content","property","author","concat","join","_public_static_d_304502870_json__WEBPACK_IMPORTED_MODULE_1__","defaultProps","propTypes","PropTypes","string","array","oneOfType","arrayOf","isRequired","Logo","gatsby__WEBPACK_IMPORTED_MODULE_3__","gatsby_image__WEBPACK_IMPORTED_MODULE_4___default","fixed","logo","childImageSharp","style","float","_public_static_d_2369744027_json__WEBPACK_IMPORTED_MODULE_1__","Footer","ActFooter","social","copyright","icons","_ref2","link","icon","actb_link","key","to","icon_default","type","fontSize","marginLeft","color","textAlign","SiteFooter","gatsby_browser_entry","_ref3","_ref3$config","config","Object","assign","_2743462859","Header","NavigationBar","nav","menu_default","theme","mode","defaultSelectedKeys","filter","selected","text","lineHeight","i","slug","Item","SiteNavigationBar","_1250442554","Content","Sider","Panel","children","other","padding","PageLayout","_Object$assign","defaultLayoutOptions","footer","fullHeight","layoutStyle","height","pageClassName","layout_default","seo","SideMenuPanel","menu","background","minHeight","width","SyntaxHighlighter","registerLanguage","js","bash","markdown","yaml","dockerfile","defaults","code","length","light","language","MDX","actb_src_actb_layout__WEBPACK_IMPORTED_MODULE_2__","DefaultSiteLayout","pageContext","context","frontmatter","react__WEBPACK_IMPORTED_MODULE_3___default","paddingTop","actb_src_actb_mdx__WEBPACK_IMPORTED_MODULE_0__"],"mappings":"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","file":"component---src-generated-posts-mysql-express-js-75c64b6aed644248593c.js","sourcesContent":["import React from 'react'\nimport { MDXTag } from '@mdx-js/tag'\n\n\nconst layoutProps = {};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.layout = null;\n  }\n\n  render() {\n    const {\n      components,\n      ...props\n    } = this.props;\n    return <MDXTag name=\"wrapper\" components={components}><MDXTag name=\"p\" components={components}>{`In this blog post I discus what could be  a production ready Express project structure with focus on testability (using Jest) and scalability. The project is intentionally simple, to illustrate essential points, but representative to provide a useful initial template for real life applications. It includes both server side Express application with MySql persistance, and a simple `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\n          \"href\": \"/posts/contact-us-form/\",\n          \"title\": \"Jest, developing and testing UI for Contact Us form\"\n        }}>{`Contact Us form`}</MDXTag>{`. When in development, project uses pm2 manager to run server and docker container to run MySql database (see blog post about `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\n          \"href\": \"/posts/schema-migration/\"\n        }}>{`migration scripts`}</MDXTag>{`). Source code is available on `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\n          \"href\": \"https://github.com/act-labs/contact-us\",\n          \"title\": \"Sample contact-us app using React/MySql/Express\"\n        }}>{`Github`}</MDXTag>{`.`}</MDXTag>\n      <MDXTag name=\"h2\" components={components}>{`Express application structure`}</MDXTag>\n      <MDXTag name=\"p\" components={components}>{`For scalability and better testability, when planing new project structure, it is better to stick with best practices. So I usually  use the following (pretty common) directory layout:`}</MDXTag>\n      <MDXTag name=\"ul\" components={components}>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\">{`models - files in this directory are responsible for interaction with database(s) (in our case MySql)`}</MDXTag>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\">{`controllers - to handle HTTP requests, to validate incoming requests, handle business logic using `}<MDXTag name=\"em\" components={components} parentName=\"li\">{`services`}</MDXTag>{` (no need here because of the simplicity of the project) and persist data using models`}</MDXTag>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\">{`routes - to configure API endpoints`}</MDXTag>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\">{`scripts - various maintenance tasks, in our case seeding database with the help of `}<MDXTag name=\"em\" components={components} parentName=\"li\">{`faker`}</MDXTag></MDXTag>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\">{`sql/migration - directory for `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`*.sql`}</MDXTag>{` files modifying database schema or importing some static data. Also contains Dockerfile to build Docker container with up-to-date schema for development`}</MDXTag>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\">{`test - for jest test files\nNow, using simple Contact Us form as an example, lets illustrate the code one may typically find in each directory.`}</MDXTag>\n      </MDXTag>\n      <MDXTag name=\"h2\" components={components}>{`Model`}</MDXTag>\n      <MDXTag name=\"p\" components={components}>{`Model contains all the files interacting with databases. They all reuse file `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`db.js`}</MDXTag>{` which opens database connections. In our case, initially, directory also contains `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`contact-us.model.js`}</MDXTag>{` with minimum necessary functions:`}</MDXTag>\n      <MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\n          \"className\": \"language-javascript\"\n        }}>{`const sql = require(\"./db\")\n\nconst ContactUs = {}\n\nContactUs.create = (newContact) => {\n    return new Promise((resolve, reject) => {\n        sql.query(\"INSERT INTO CONTACT_US SET ?\", newContact, (err, res) => {\n            if (err) {\n                console.log(\"error: \", err)\n                reject(err)\n                return\n            }\n\n            console.log(\"created contact-us: \", { id: res.insertId, ...newContact })\n            resolve({ id: res.insertId, ...newContact })\n        })\n    })\n}\n\nContactUs.findById = (contactId) => {\n    return new Promise((resolve, reject) => {\n        sql.query(\\`SELECT * FROM CONTACT_US WHERE id = \\${contactId}\\`, (err, res) => {\n            if (err) {\n                console.log(\"error: \", err)\n                reject(err)\n                return\n            }\n\n            if (res.length) {\n                console.log(\"found contact-us: \", res[0])\n                resolve(res[0])\n                return\n            }\n\n            // not found ContactUs with the id\n            resolve(null)\n        })\n    })\n}\n\nContactUs.removeAll = () => {\n    return new Promise((resolve, reject) => {\n        sql.query(\"DELETE FROM CONTACT_US\", (err, res) => {\n            if (err) {\n                console.log(\"error: \", err)\n                reject(err)\n                return\n            }\n\n            console.log(\\`deleted \\${res.affectedRows} contact-us\\`)\n            resolve(res)\n        })\n    })\n}\n\nContactUs.getAll = () => {\n    return new Promise((resolve, reject) => {\n        sql.query(\"SELECT * FROM CONTACT_US ORDER BY ID\", (err, res) => {\n            if (err) {\n                console.log(\"error: \", err)\n                reject(err)\n                return\n            }\n\n            console.log(\"contact-us: \", res)\n            resolve(res)\n        })\n    })\n}\n\nmodule.exports = ContactUs\n`}</MDXTag></MDXTag>\n      <MDXTag name=\"h2\" components={components}>{`Controllers`}</MDXTag>\n      <MDXTag name=\"p\" components={components}>{`The only `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`contact-us.controller.js`}</MDXTag>{` module does the simplest request validation/error handling`}</MDXTag>\n      <MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\n          \"className\": \"language-javascript\"\n        }}>{`const Contact = require(\"../models/contact-us.model\")\n\n// Create and Save a new Message\nexports.create = async(req, res) => {\n    // Validate request\n    // Later more sanity checking could be added here\n    if (!req.body) {\n        res.status(400).send({\n            message: \"Content can not be empty!\"\n        })\n    }\n\n    try {\n        await Contact.create(req.body)\n        res.send({message: \"Success!\"})\n    } catch (err) {\n        console.error(err)\n        res.status(500).send({\n            message: err.message || \"Some error occurred while saving your message.\"\n        })\n    }\n}\n\n// Retrieve all Messages from the database.\nexports.findAll = async(_req, res) => {\n    try {\n        const contacts = await Contact.getAll()\n        res.send(contacts)\n    } catch (err) {\n        console.error(err)\n        res.status(500).send({\n            message: err.message || \"Some error occurred while retrieving messages.\"\n        })\n    }\n}\n`}</MDXTag></MDXTag>\n      <MDXTag name=\"h2\" components={components}>{`Routes`}</MDXTag>\n      <MDXTag name=\"p\" components={components}>{`Files here work essentially as configuration files, responsible to configure our API endpoints:`}</MDXTag>\n      <MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\n          \"className\": \"language-javascript\"\n        }}>{`module.exports = app => {\n    const contacts = require(\"../controllers/contact-us.controller\")\n\n    // Create a new Contact\n    app.post(\"/contacts\", contacts.create)\n\n    // Retrieve all Contacts\n    app.get(\"/contacts\", contacts.findAll)\n}\n`}</MDXTag></MDXTag>\n      <MDXTag name=\"h2\" components={components}>{`Server`}</MDXTag>\n      <MDXTag name=\"p\" components={components}>{`Our server.js file wires it all together (adding a few endpoints for easy diagnostic):`}</MDXTag>\n      <MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\n          \"className\": \"language-javascript\"\n        }}>{`const express = require('express')\nconst bodyParser = require('body-parser')\nconst path = require('path')\n\nconst cors = require('cors')\n\nconst PORT = process.env.PORT || 8080\nconst app = express()\n\n//STATIC FOLDER\napp.use(express.static(path.join(__dirname, '../client/build')))\n\n// Body Parser Middleware\napp.use(bodyParser.json())\n\n// Deal with CORS\napp.use(cors())\n\n// Start Express listening\napp.listen(PORT, () => {\n  console.log(\\`Server started on port \\${PORT}\\`)\n})\n\n// Test to make sure the API can talk to React\napp.get('/', (_req, res) => {\n  return res.json({\n    message: 'API Active'\n  })\n})\n\n// An echo, to help with debugging\napp.post('/', (req, res) => {\n  return res.json({\n    message: 'ECHO!',\n    posted: req.body\n  })\n})\n\nrequire(\"./routes/contact-us.routes\")(app)\n`}</MDXTag></MDXTag>\n      <MDXTag name=\"h2\" components={components}>{`TDD using Jest, easy MySql mocking`}</MDXTag>\n      <MDXTag name=\"p\" components={components}>{`Such complicated project structure may look like an overkill for such a simple project, but we will rip benefits of our approach when extending and maintaining our project. Even now, such structure helps me to test code easily. First, I can test my model functions against development Mysql database running in a Docker container:`}</MDXTag>\n      <MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\n          \"className\": \"language-javascript\"\n        }}>{`describe('model methods', () => {\n    it('contact is created and queried back', async () => {\n        const req = {\n            first_name: 'name',\n            email: 'email@email.com',\n            message: 'message',\n            last_name: 'surname',\n            phone: 'phone',\n            address: 'address'\n        }\n        const contact = require(\"../../models/contact-us.model\")\n        const res1 = await contact.create(req)\n        expect(res1).toMatchObject(req)\n        const res2 = await contact.findById(res1.id)\n        expect(res2).toMatchObject(res1)\n    })\n\n    it('delete all, create a few, select all', async () => {\n        const faker = require(\"faker\")\n        const contact = require(\"../../models/contact-us.model\")\n        await contact.removeAll()\n        const total = 5\n\n        const contacts = []\n        for (let i = 0; i < total; i++) {\n            const req = {\n                first_name: faker.name.firstName(),\n                email: faker.internet.email(),\n                message: faker.lorem.sentences(5),\n                last_name: faker.name.lastName(),\n                phone: faker.phone.phoneNumberFormat(),\n                address: faker.address.streetAddress(\"###\")\n            }\n            const res1 = await contact.create(req)\n            contacts.push(res1)\n        }\n\n        const all = await contact.getAll()\n        expect(all.length).toBe(total)\n\n        for (let i = 0; i < total; i++) {\n            expect(all[i]).toMatchObject(contacts[i])\n        }\n    })\n\n    afterAll(() => {\n        const db = require(\"../../models/db\")\n        db.destroy();\n    })\n})\n`}</MDXTag></MDXTag>\n      <MDXTag name=\"p\" components={components}>{`Here, first, I insert a new object and query it immediately. Than I remove all records, insert a few new, generating them using faker, query them all again and close the database connection. After models are tested, one may test the rest of application without MySql container, just mocking MySql and models using Jest:`}</MDXTag>\n      <MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\n          \"className\": \"language-javascript\"\n        }}>{`jest.mock(\"mysql\", () => {\n    return {\n        createConnection: () => ({\n            connect: () => null\n        })\n    }\n})\n\nconst model = require(\"../../models/contact-us.model\")\njest.mock(\"../../models/contact-us.model\")\n\nconst mockResponse = () => {\n    const res = {}\n    res.send = jest.fn().mockReturnValue(res)\n    res.status = jest.fn().mockReturnValue(res)\n    res.json = jest.fn().mockReturnValue(res)\n    return res\n}\n\ndescribe('controllers', () => {\n    it('contact creation success', async () => {\n        const data = {\n            first_name: 'name',\n            email: 'email@email.com',\n            message: 'message',\n            last_name: 'surname',\n            phone: 'phone',\n            address: 'address'\n        }\n        const contact = require(\"../../controllers/contact-us.controller\")\n        const res = mockResponse ()\n        await contact.create({ body: data }, res)\n        expect(model.create.mock.calls.length).toBe(1)\n        expect(model.create.mock.calls[0][0]).toEqual(data)\n\n        expect(res.send.mock.calls[0][0]).toEqual({message: \"Success!\"})\n    })\n})\n`}</MDXTag></MDXTag>\n      <MDXTag name=\"h2\" components={components}>{`Next`}</MDXTag>\n      <MDXTag name=\"p\" components={components}>{`As one may see, my model code is not especially original, and could be easily distilled into more generic functions for easy reuse for similar tables. As the project and the number of endpoints grow, we often find ourself in a situation when our application is constantly reuses just a small set of core, generic functions and UI components. Adding new endpoints becomes practically the matter of configuration. Tests of such endpoints become less and less helpful, as they essentially retest our generic functions with different parameters. At the same time, as our production infrastructure becomes more and more and more complex, interaction between different components of application becomes the main source of bugs and complexity. At this point we may wish to resort to the integration and end-to-end testing and tool simplifying such tests (like Cypress). Even than, clean project structure and ability to test different application components in isolation (so called Double Loop Testing) greatly simplify maintenance and further development.`}</MDXTag>\n           </MDXTag>;\n  }\n\n}\nexport const _frontmatter = {\n  \"title\": \"Express and MySql. Simple Contact Us form\",\n  \"keywords\": \"MySql, Express, Jest, faker.js, Docker\",\n  \"order\": 0\n};\n    ","import React from \"react\";\r\nimport ContentComponent from 'D:/projects/flash/packages/act-labs-blog/src/content/posts/mysql-express.md';\r\nimport OneColumnLayout from 'components/page-layout';\r\n\r\nexport default function SnippetsLayout(props) {\r\n    return <OneColumnLayout {...props}><ContentComponent {...props}/></OneColumnLayout>\r\n}\r\n\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Helmet from 'react-helmet'\r\nimport { StaticQuery, graphql } from 'gatsby'\r\n\r\nfunction SEO({ description, lang, meta, keywords, title }) {\r\n  return (\r\n    <StaticQuery\r\n      query={detailsQuery}\r\n      render={data => {\r\n        if (typeof keywords == \"string\"){\r\n          keywords = keywords.split(\",\").map(v => v.trim());\r\n        }\r\n        description = description || data.site.siteMetadata.description\r\n        return (\r\n          <Helmet\r\n            htmlAttributes={{\r\n              lang,\r\n            }}\r\n            title={title}\r\n            titleTemplate={`%s | ${data.site.siteMetadata.project}`}\r\n            meta={[\r\n              {\r\n                name: 'description',\r\n                content: description,\r\n              },\r\n              {\r\n                property: 'og:title',\r\n                content: title,\r\n              },\r\n              {\r\n                property: 'og:description',\r\n                content: description,\r\n              },\r\n              {\r\n                property: 'og:type',\r\n                content: 'website',\r\n              },\r\n              {\r\n                name: 'twitter:card',\r\n                content: 'summary',\r\n              },\r\n              {\r\n                name: 'twitter:creator',\r\n                content: data.site.siteMetadata.author,\r\n              },\r\n              {\r\n                name: 'twitter:title',\r\n                content: title,\r\n              },\r\n              {\r\n                name: 'twitter:description',\r\n                content: description,\r\n              },\r\n            ]\r\n              .concat(\r\n                keywords\r\n                  ? {\r\n                      name: 'keywords',\r\n                      content: keywords.join(', '),\r\n                    }\r\n                  : []\r\n              )\r\n              .concat(meta)}\r\n          />\r\n        )\r\n      }}\r\n    />\r\n  )\r\n}\r\n\r\nSEO.defaultProps = {\r\n  lang: 'en',\r\n  meta: [],\r\n  keywords: null,\r\n}\r\n\r\nSEO.propTypes = {\r\n  description: PropTypes.string,\r\n  lang: PropTypes.string,\r\n  meta: PropTypes.array,\r\n  keywords: PropTypes.oneOfType([\r\n    PropTypes.string,\r\n    PropTypes.arrayOf(PropTypes.string)\r\n  ]),\r\n  title: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default SEO\r\n\r\nconst detailsQuery = graphql`\r\n  query DefaultSEOQuery {\r\n    site {\r\n      siteMetadata {\r\n        project\r\n        description\r\n        author\r\n      }\r\n    }\r\n  }\r\n`\r\n","import React from 'react'\r\nimport { StaticQuery, graphql } from 'gatsby'\r\nimport Img from 'gatsby-image'\r\n\r\n\r\nexport default function Logo(){\r\n        return (<StaticQuery\r\n            query={graphql`\r\n                query {\r\n                    logo: file(relativePath: { eq: \"logo.png\" }) {\r\n                    childImageSharp {\r\n                        fixed(height: 60) {\r\n                        ...GatsbyImageSharpFixed\r\n                        }\r\n                    }\r\n                    }\r\n                }\r\n            `}\r\n            render={data => <Img fixed={data.logo.childImageSharp.fixed} style={{float:\"left\"}}/>}\r\n        />)\r\n    }\r\n\r\n","import React from \"react\"\r\nimport { StaticQuery, graphql } from 'gatsby'\r\n\r\nimport {Link} from \"actb\";\r\nimport {\r\n    Layout, Icon\r\n  } from 'antd';\r\n  \r\n  const {\r\n    Footer\r\n  } = Layout;\r\n\r\n\r\nexport function ActFooter({social, copyright}){\r\n    const icons = social.map(({link, icon})=><Link key={icon} to={link}><Icon type={icon}  style={{ fontSize: '24px', marginLeft:10, color: 'rgba(0, 0, 0, 0.65)'}} /></Link>)\r\n    return (\r\n        <Footer style={{ textAlign: 'center' }}>\r\n            <div>{copyright}<div style={{float:\"right\"}}>{icons}</div></div>\r\n        </Footer>\r\n    )\r\n}\r\n\r\nexport default function SiteFooter(props){\r\n  if (props.social){\r\n      return <ActFooter {...props}/>\r\n  }\r\n  return <StaticQuery\r\n  query={graphql`\r\n    query {\r\n      config: configYaml(fields:{slug: {eq:\"/config/main/\"}}){\r\n          copyright\r\n          social {\r\n              icon\r\n              link\r\n          }        \r\n      }\r\n    }\r\n  `}\r\n  render={({config:{social, copyright}}) => <ActFooter social={social} copyright={copyright} {...props} />}\r\n/>\r\n}  ","import React from \"react\";\r\nimport {Logo, Link} from \"actb\"\r\nimport { StaticQuery, graphql } from 'gatsby'\r\n\r\nimport {\r\n  Layout, Menu\r\n} from 'antd';\r\n  \r\nconst {\r\n  Header\r\n} = Layout;\r\n\r\n\r\nexport function NavigationBar({nav}){  \r\n    return (\r\n      <Header className=\"navigation-bar\">\r\n        <Link to=\"/\" ><Logo/></Link>\r\n        <Menu\r\n            theme=\"dark\"\r\n            mode=\"horizontal\"\r\n            defaultSelectedKeys={ nav.filter(v=>v.selected).map(v=>v.text) }\r\n            style={{ lineHeight: '64px' }}\r\n        >\r\n          {\r\n            nav.map(({slug, text}, i)=>\r\n              <Menu.Item key={i}>\r\n                <Link to={slug || \"/\"} >{text}</Link>\r\n              </Menu.Item>\r\n            )\r\n          }  \r\n        </Menu>\r\n      </Header>\r\n    )\r\n} \r\n\r\nexport default function SiteNavigationBar(props){\r\n    if (props.nav){\r\n        return <NavigationBar {...props}/>\r\n    }\r\n    return <StaticQuery\r\n    query={graphql`\r\n      query {\r\n        config: configYaml(fields:{slug: {eq:\"/config/main/\"}}){\r\n            nav {\r\n                text\r\n                slug\r\n            }        \r\n        }\r\n      }\r\n    `}\r\n    render={({config:{nav}}) => <NavigationBar nav={nav} {...props} />}\r\n  />\r\n}  ","import React from \"react\"\r\n\r\nimport {Seo, Footer, NavigationBar} from \"actb\";\r\n\r\nimport {\r\n    Layout\r\n  } from 'antd';\r\n  \r\nimport \"./layout.less\"\r\n\r\nconst {\r\n  Content, Sider\r\n} = Layout;\r\n\r\n\r\nexport function Panel(props){\r\n  const {style, children, ...other} = props\r\n    return (\r\n        <Content style={Object.assign({ padding: '5px 24px' }, style)} {...other}>\r\n            {children}                     \r\n        </Content>\r\n    )\r\n}\r\n\r\nexport function SideMenuPanel({children, menu}){\r\n    return (\r\n      <Layout style={{ padding: '1em 0', background: '#fff', minHeight: 1000 }}>\r\n        <Sider width={200}>\r\n          {menu}\r\n        </Sider>\r\n        <Panel>{children}</Panel>\r\n      </Layout>\r\n    );\r\n  }\r\n\r\nexport default function PageLayout(props){\r\n  const {children, className, \r\n    title, description, keywords, style, layout} = props\r\n  const {footer, fullHeight} = Object.assign({}, defaultLayoutOptions, layout)\r\n  const layoutStyle = Object.assign({}, fullHeight?{height:\"100%\"}:null, style)\r\n  const pageClassName = (className? className + \" \" : \"\") + \"page-layout\"\r\n  return (\r\n    <Layout className={pageClassName} style={layoutStyle}>\r\n      <Seo title={title} keywords={keywords} description={description} />\r\n      <NavigationBar/>\r\n        {children}\r\n      {footer? <Footer/>:null}\r\n    </Layout>\r\n  );  \r\n}\r\n\r\nconst defaultLayoutOptions = {\r\n  footer: true\r\n}\r\n\r\nPageLayout.Panel = Panel;\r\nPageLayout.SideMenuPanel = SideMenuPanel; \r\n","import React from \"react\";\r\nimport { Light as SyntaxHighlighter } from \"react-syntax-highlighter\";\r\nimport js from 'react-syntax-highlighter/dist/esm/languages/hljs/javascript';\r\nimport bash from 'react-syntax-highlighter/dist/esm/languages/hljs/bash';\r\nimport markdown from 'react-syntax-highlighter/dist/esm/languages/hljs/markdown';\r\nimport yaml from 'react-syntax-highlighter/dist/esm/languages/hljs/yaml';\r\nimport dockerfile from 'react-syntax-highlighter/dist/esm/languages/hljs/dockerfile';\r\n\r\nimport { github as style } from 'react-syntax-highlighter/dist/styles/hljs';\r\n\r\nSyntaxHighlighter.registerLanguage('javascript', js);\r\nSyntaxHighlighter.registerLanguage('sh', bash);\r\nSyntaxHighlighter.registerLanguage('markdown', markdown);\r\nSyntaxHighlighter.registerLanguage('yaml', yaml);\r\nSyntaxHighlighter.registerLanguage('dockerfile', dockerfile);\r\n\r\nexport {SyntaxHighlighter};\r\n\r\nexport default function Code(props) {\r\n    let lang = 'bash'\r\n    if (props.className){\r\n      const name = props.className.split(\"-\");\r\n      if (name.length > 1){\r\n        lang = name[1]\r\n      }\r\n    }\r\n  \r\n    return <SyntaxHighlighter language={lang} style={style}>{props.children}</SyntaxHighlighter>\r\n}","import React from \"react\";\r\nimport { MDXProvider } from '@mdx-js/tag';\r\n\r\nimport {Code, Link} from \"actb\";\r\n\r\nexport const components = {\r\n    code: Code,\r\n    a: Link\r\n  };\r\n  \r\nconst defaults = {components}; \r\n\r\nexport default function MDX(props){\r\n    const {components, children} = Object.assign({}, defaults, props);\r\n\r\n    return (\r\n    <MDXProvider components={components}>\r\n        {children}\r\n    </MDXProvider>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport {Mdx, Layout} from \"actb\"\r\nimport '../actb/layout/simple.css'\r\n\r\nconst Panel = Layout.Panel\r\n\r\nexport default function DefaultSiteLayout({children, pageContext}){\r\n  const context = Object.assign({frontmatter:{}}, pageContext)\r\n  const props = Object.assign({}, {layout:context.layout}, context.frontmatter);\r\n  return (\r\n    <Layout {...props}>\r\n      <Panel style={{ paddingTop: \"1em\"}}>\r\n        {props.title? <h1>{props.title}</h1>:null}\r\n        <Mdx>{children}</Mdx>\r\n      </Panel>\r\n    </Layout>\r\n  )\r\n}\r\n\r\n\r\n"],"sourceRoot":""}